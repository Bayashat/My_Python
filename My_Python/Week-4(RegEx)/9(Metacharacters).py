                        ### 9.Metacharacters

'''
正则表达式模式
模式字符串使用特殊的语法来表示一个正则表达式：

字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。

多数字母和数字前加一个反斜杠时会拥有不同的含义。

标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。

反斜杠本身需要使用反斜杠转义。

由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r'\t'，等价于 \\t )匹配相应的特殊字符。

下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。


1. []	    用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'
            A set of characters	  
            允许匹配一组可能出现的字符。代表里面的可能有.      请你使用字符组匹配Ruby、Rube、ruby、rube: [Rr]ub[ye]

2. \	    Signals a special sequence (can also be used to escape special characters)       "\d"
	       将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。
	       例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("         


3. .	    匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。
            Any character (except newline character      Ex: "he..o"
             匹配除换行符 \n 之外的任何单字符。要匹配 . , 请使用 \.
             .字符代表匹配任何单个字符，它只能出现在方括号以外。值得注意的是： .字符只有一个不能匹配的字符，也就是换行符(\n)


4. ^	    匹配字符串的开头
            Starts with	        "^hello"
             匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \^。


5. $	    匹配字符串的末尾。
            Ends with        "world$"
            匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。
            

6. *	    匹配0个或多个的表达式。
            Zero or more occurrences	   Ex:   "aix*"
             匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。



7. +	    匹配1个或多个的表达式。
            One or more occurrences	        Ex:   "aix+"
             匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。


8. {n}	    匹配n个前面表达式。例如，"o{2}"不能匹配"Bob"中的"o"，但是能匹配"food"中的两个o。
            Exactly the specified number of occurrences	    "al{2}"


9. {n,}     精确匹配n个前面表达式。例如，"o{2,}"不能匹配"Bob"中的"o"，但能匹配"foooood"中的所有o。"o{1,}"等价于"o+"。"o{0,}"则等价于"o*"


10. {n,m}   匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式


11. a|b	     匹配a或b
             Either or	    "falls|stays"
             指明两项之间的一个选择。要匹配 |，请使用 \|。


12. (re)	    匹配括号内的表达式，也表示一个组
                Capture and group  : 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)

13. (?imx)	    正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。


14. (?-imx)	    正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。

15. (?: re)	       类似 (...), 但是不表示一个组

16. (?imx: re)	    在括号中使用i, m, 或 x 可选标志

17. (?-imx: re)	        在括号中不使用i, m, 或 x 可选标志

18. (?#...)	            注释.

19. (?= re)	        前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。
                    但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。

20. (?! re)	        前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。  


21. (?> re)	        匹配的独立模式，省去回溯。


22. [	            标记一个中括号表达式的开始。要匹配 [ , 请使用 \[ 


23. ?	      匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式
              匹配前面的子表达式0次或1次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?


24. {	      标记限定符表达式的开始。要匹配 {，请使用 \{


25. -        为了适应这一点，正则表达式引擎在字符组中使用连字符(-)代表区间，依照这个规则，我们可以总结出三点：
                  要匹配任意数字可以使用[0-9]；
                  如果想要匹配所有小写字母，可以写成[a-z]；
                  想要匹配所有大写字母可以写成[A-Z]
                  

26.[^..]        不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。

'''